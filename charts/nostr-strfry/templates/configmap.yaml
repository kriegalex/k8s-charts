apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nostr-strfry.fullname" . }}-config
  labels:
    {{- include "nostr-strfry.labels" . | nindent 4 }}
data:
  strfry.conf: |-
    # Directory that contains the strfry LMDB database (restart required)
    db = {{ .Values.config.db | quote }}

    dbParams {
      # Maximum number of threads/processes that can simultaneously have LMDB transactions open (restart required)
      maxreaders = {{ .Values.config.dbParams.maxreaders }}

      # Size of mmap() to use when loading LMDB (default is 10TB, does *not* correspond to disk-space used) (restart required)
      mapsize = {{ .Values.config.dbParams.mapsize }}

      # Disables read-ahead when accessing the LMDB mapping. Reduces IO activity when DB size is larger than RAM. (restart required)
      noReadAhead = {{ .Values.config.dbParams.noReadAhead }}
    }

    events {
      # Maximum size of normalised JSON, in bytes
      maxEventSize = {{ .Values.config.events.maxEventSize }}

      # Events newer than this will be rejected
      rejectEventsNewerThanSeconds = {{ .Values.config.events.rejectEventsNewerThanSeconds }}

      # Events older than this will be rejected
      rejectEventsOlderThanSeconds = {{ .Values.config.events.rejectEventsOlderThanSeconds }}

      # Ephemeral events older than this will be rejected
      rejectEphemeralEventsOlderThanSeconds = {{ .Values.config.events.rejectEphemeralEventsOlderThanSeconds }}

      # Ephemeral events will be deleted from the DB when older than this
      ephemeralEventsLifetimeSeconds = {{ .Values.config.events.ephemeralEventsLifetimeSeconds }}

      # Maximum number of tags allowed
      maxNumTags = {{ .Values.config.events.maxNumTags }}

      # Maximum size for tag values, in bytes
      maxTagValSize = {{ .Values.config.events.maxTagValSize }}
    }

    relay {
      # Interface to listen on. Use 0.0.0.0 to listen on all interfaces (restart required)
      bind = {{ .Values.config.relay.bind | quote }}

      # Port to open for the nostr websocket protocol (restart required)
      port = {{ .Values.config.relay.port }}

      # Set OS-limit on maximum number of open files/sockets (if 0, don't attempt to set) (restart required)
      nofiles = {{ .Values.config.relay.nofiles }}

      # HTTP header that contains the client's real IP, before reverse proxying (ie x-real-ip) (MUST be all lower-case)
      realIpHeader = {{ .Values.config.relay.realIpHeader | quote }}

      info {
        # NIP-11: Name of this server. Short/descriptive (< 30 characters)
        name = {{ .Values.config.relay.info.name | quote }}

        # NIP-11: Detailed information about relay, free-form
        description = {{ .Values.config.relay.info.description | quote }}

        # NIP-11: Administrative nostr pubkey, for contact purposes
        pubkey = {{ .Values.config.relay.info.pubkey | quote }}

        # NIP-11: Alternative administrative contact (email, website, etc)
        contact = {{ .Values.config.relay.info.contact | quote }}

        # NIP-11: URL pointing to an image to be used as an icon for the relay
        icon = {{ .Values.config.relay.info.icon | quote }}

        # List of supported lists as JSON array, or empty string to use default. Example: "[1,2]"
        nips = {{ .Values.config.relay.info.nips | quote }}
      }

      # Maximum accepted incoming websocket frame size (should be larger than max event) (restart required)
      maxWebsocketPayloadSize = {{ .Values.config.relay.maxWebsocketPayloadSize }}

      # Maximum number of filters allowed in a REQ
      maxReqFilterSize = {{ .Values.config.relay.maxReqFilterSize }}

      # Websocket-level PING message frequency (should be less than any reverse proxy idle timeouts) (restart required)
      autoPingSeconds = {{ .Values.config.relay.autoPingSeconds }}

      # If TCP keep-alive should be enabled (detect dropped connections to upstream reverse proxy)
      enableTcpKeepalive = {{ .Values.config.relay.enableTcpKeepalive }}

      # How much uninterrupted CPU time a REQ query should get during its DB scan
      queryTimesliceBudgetMicroseconds = {{ .Values.config.relay.queryTimesliceBudgetMicroseconds }}

      # Maximum records that can be returned per filter
      maxFilterLimit = {{ .Values.config.relay.maxFilterLimit }}

      # Maximum number of subscriptions (concurrent REQs) a connection can have open at any time
      maxSubsPerConnection = {{ .Values.config.relay.maxSubsPerConnection }}

      writePolicy {
        # If non-empty, path to an executable script that implements the writePolicy plugin logic
        plugin = {{ .Values.config.relay.writePolicy.plugin | quote }}
      }

      compression {
        # Use permessage-deflate compression if supported by client. Reduces bandwidth, but slight increase in CPU (restart required)
        enabled = {{ .Values.config.relay.compression.enabled }}

        # Maintain a sliding window buffer for each connection. Improves compression, but uses more memory (restart required)
        slidingWindow = {{ .Values.config.relay.compression.slidingWindow }}
      }

      logging {
        # Dump all incoming messages
        dumpInAll = {{ .Values.config.relay.logging.dumpInAll }}

        # Dump all incoming EVENT messages
        dumpInEvents = {{ .Values.config.relay.logging.dumpInEvents }}

        # Dump all incoming REQ/CLOSE messages
        dumpInReqs = {{ .Values.config.relay.logging.dumpInReqs }}

        # Log performance metrics for initial REQ database scans
        dbScanPerf = {{ .Values.config.relay.logging.dbScanPerf }}

        # Log reason for invalid event rejection? Can be disabled to silence excessive logging
        invalidEvents = {{ .Values.config.relay.logging.invalidEvents }}
      }

      numThreads {
        # Ingester threads: route incoming requests, validate events/sigs (restart required)
        ingester = {{ .Values.config.relay.numThreads.ingester }}

        # reqWorker threads: Handle initial DB scan for events (restart required)
        reqWorker = {{ .Values.config.relay.numThreads.reqWorker }}

        # reqMonitor threads: Handle filtering of new events (restart required)
        reqMonitor = {{ .Values.config.relay.numThreads.reqMonitor }}

        # negentropy threads: Handle negentropy protocol messages (restart required)
        negentropy = {{ .Values.config.relay.numThreads.negentropy }}
      }

      negentropy {
        # Support negentropy protocol messages
        enabled = {{ .Values.config.relay.negentropy.enabled }}

        # Maximum records that sync will process before returning an error
        maxSyncEvents = {{ .Values.config.relay.negentropy.maxSyncEvents }}
      }
    }
{{ if .Values.nip05.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nostr-strfry.fullname" . }}-nip05
  labels:
    {{- include "nostr-strfry.labels" . | nindent 4 }}
data:
  nostr.json: |
    {
      "names": 
      {{- toJson .Values.nip05.identities | nindent 6 }},
      "relays": 
      {{- toJson .Values.nip05.relays | nindent 6 }}
    }
{{ end }}
