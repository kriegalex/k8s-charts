# Bitcoin Core Chart

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## Prerequisites
Before deploying this chart, ensure your Kubernetes cluster meets the following requirements:

1. Kubernetes 1.19+ – This chart uses features that are supported on Kubernetes 1.19 and above.
2. Helm 3.0+ – Helm 3 is required to manage and deploy this chart.
3. Persistent storage – Bitcoin Core requires significant disk space for blockchain data.

## Installation

### Helm

1. Add the Helm chart repo

```bash
helm repo add k8s-charts https://kriegalex.github.io/k8s-charts/
helm repo update
```

2. Inspect & modify the default values (optional)

```bash
helm show values k8s-charts/bitcoin-stack > custom-values.yaml
```

3. Install the chart

```bash
helm upgrade --install bitcoin-stack k8s-charts/bitcoin-stack --values custom-values.yaml
```

## Using Different Bitcoin Core Images

This chart is designed to work primarily with the `blockstream/bitcoind` image, but it can be adapted to work with other Bitcoin Core images by adjusting the `paths` configuration in your values file:

```yaml
# Example for using a different Bitcoin Core image
image:
  repository: ruimarinho/bitcoin-core
  tag: "27.2"

bitcoind:
  dataDir: "/home/bitcoin/.bitcoin"  # Adjust based on the image's data directory
  configFile: "/home/bitcoin/.bitcoin/bitcoin.conf"  # Adjust based on the image's config path
```

**Note**: While this chart allows for using alternative Bitcoin Core images, compatibility is not guaranteed. Different images may:
- Have different environment variable expectations
- Use different directory structures
- Have different startup parameters

You may need to customize additional settings or even modify the templates for complete compatibility with alternative images.

## Accessing Bitcoin Core

### RPC Access

To access the Bitcoin Core RPC from within the cluster:

```bash
kubectl exec -it sts/bitcoin-stack-0 -- bitcoin-cli -rpcuser=YOUR_RPC_USER -rpcpassword=YOUR_RPC_PASSWORD getblockchaininfo
```

To retrieve the auto-generated RPC password (if not manually set):

```bash
kubectl get secret bitcoin-stack-auth -o jsonpath="{.data.RPC_PASSWORD}" | base64 --decode
```

### Port Forwarding

For local access to Bitcoin Core:

```bash
# For RPC access (HTTP)
kubectl port-forward sts/bitcoin-stack-0 8332:8332

# For P2P network access (TCP)
kubectl port-forward sts/bitcoin-stack-0 8333:8333
```

## Storage Considerations

Bitcoin Core requires significant storage for the full blockchain:
- Bitcoin Mainnet: 700+ GB (and growing)
- Bitcoin Testnet: 50+ GB (and growing)

Ensure your persistent volume has adequate capacity. The StatefulSet uses volumeClaimTemplates to provision storage:

```yaml
persistence:
  size: 700Gi  # Adjust according to your needs
```

## Advanced Configuration

### Network Types

This chart supports all three Bitcoin network types:
- Mainnet (default): The main Bitcoin network
- Testnet: Test network for development
- Regtest: Local regression testing

To enable testnet:
```yaml
bitcoind:
  testnet: true
```

To enable regtest:
```yaml
bitcoind:
  regtest: true
```

### Storage Optimization

For nodes with limited storage, you can enable pruning:

```yaml
bitcoind:
  pruning: true
  prunesize: 1000  # Size in MiB to target (minimum 550)
```

### Performance Tuning

For better performance, especially on nodes with more resources:

```yaml
bitcoind:
  dbCache: 4096  # Allocate 4GB for database cache
  sync:
    parallelblocks: 16  # Download more blocks in parallel (1-16)
    maxconnections: 125  # Maximum connections to maintain
```

### Advanced Indexing

Enable additional indexes for specific use cases:

```yaml
bitcoind:
  txIndex: true              # Full transaction index
  blockfilterIndex: true     # Compact block filters (BIP158)
  coinstatsIndex: true       # Coinstats index for faster balance calculations
```

### Initial Sync Optimization

For faster initial synchronization, you can use assumevalid:

```yaml
bitcoind:
  sync:
    assumevalid: "00000000000000000008a89e854d57e5667df88f1cdef6fde2fbca1de5b639ad"  # Recent block hash
```

## Values

{{ template "chart.valuesTable" . }}
